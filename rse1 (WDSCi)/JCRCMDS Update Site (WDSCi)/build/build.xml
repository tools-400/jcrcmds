<project name="de.tools400.rdp.rpgunit.updatesite" default="build" basedir=".">

	<!-- Include Ant Contrib tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<!-- Load project names and new version number -->
	<property file="build.properties" />

	<!-- Load ftp user name and password -->
	<property file="ftp.properties" />

	<!-- Set date and time -->
	<tstamp>
		<format property="today.timestamp" pattern="dd.MM.yyyy - kk:mm:ss" locale="de,DE" />
		<format property="today.date.eur" pattern="dd.MM.yyyy" locale="de,DE" />
		<format property="today.date.iso" pattern="yyyy-MM-dd" locale="de,DE" />
		<format property="today.year" pattern="yyyy" locale="de,DE" />
	</tstamp>
	 
	<property name="workspace.home"   location="./../.."/>
	<property name="project.dir"      location="./.."/>

	<property name="site.root"        location="./.."           />
	<property name="site.assets"      location="./../assets"    />
	<property name="build.upload.dir" location="./../upload" />
	<property name="site.features"    location="./../features"  />
	<property name="site.plugins"     location="./../plugins"   />
	
	<property name="templates.dir"    location="./templates"    />

	<property name="temp.dir.root"             location="${basedir}/temp" />
	<property name="temp.dir.local_updatesite" location="${temp.dir.root}/local_updatesite" />
	<property name="temp.dir.local_web"        location="${temp.dir.root}/local_web" />
	<property name="temp.dir.local_homepage"   location="${temp.dir.root}/local_homepage" />
	
	<property name="i5-downloads.root.dir"     location="${basedir}/i5-downloads" />
	<property name="i5-downloads.source.dir"   location="${i5-downloads.root.dir}/source" />
	
	<!-- Check for BETA or RELEASE version -->
	<property name="release.flag.regex" value="^(?:[1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{3}|(r)))?)$" />
	<propertyregex property="release.flag" input="${build.version}" regexp="${release.flag.regex}" select="\1" casesensitive="true" />
	<if>
		<equals arg1="${release.flag}" arg2="r" />
		<then>
			<echo>Building a RELEASE version.</echo>
			<property name="is.beta.version" value="false" />
			<property name="beta.dir" value="." />
			<property name="version.info" value="&lt;div class=&quot;release&quot;&gt;Release Version - ${build.version}&lt;/div&gt;" />
			<property name="site.property.url.tmp" value="${sf.update.site}/eclipse" />
		</then>
		<else>
			<echo>Building a BETA version.</echo>
			<property name="is.beta.version" value="true" />
			<property name="beta.dir" value="${sf.ftp.beta.dir.name}" />
			<property name="version.info" value="&lt;div class=&quot;beta&quot;&gt;Beta Version - ${build.version}&lt;/div&gt;" />
			<property name="site.property.url.tmp" value="${sf.update.site}/${beta.dir}/eclipse" />
		</else>
	</if>
	
	<property name="build.upload.dir.files"         location="${build.upload.dir}/sf-files/${beta.dir}" />
	<property name="build.upload.dir.homepage"      location="${build.upload.dir}/sf-homepage/${beta.dir}" />
	<property name="build.upload.dir.help"          location="${build.upload.dir}/sf-help/${beta.dir}/help" />

	<if>
		<equals arg1="${build.target}" arg2="RDi" />
		<then>
			<property name="target.ide.sf.dir"                 value="rdi8.0" />
			<property name="target.ide.ide.product.name.zip"   value="RDi_8.0+" />
			<property name="target.ide.ide.product.name.short" value="RDi 8.0+" />
			<property name="target.ide.ide.product.name.long"  value="IBM Rational Developer for i" />
			<property name="build.upload.dir.files.eclipse" location="${build.upload.dir}/sf-files/${beta.dir}/eclipse/${target.ide.sf.dir}" />
			<property name="build.upload.dir.files.web"     location="${build.upload.dir}/sf-web/${beta.dir}/eclipse/${target.ide.sf.dir}" />
		</then>
		<else>
			<property name="target.ide.sf.dir"                 value="wdsci7.0" />
			<property name="target.ide.ide.product.name.zip"   value="WDSCi_7.0+" />
			<property name="target.ide.ide.product.name.short" value="WDSCi 7.0" />
			<property name="target.ide.ide.product.name.long"  value="Websphere Development Studio Client for iSeries" />
			<property name="build.upload.dir.files.eclipse" location="${build.upload.dir}/sf-files/${beta.dir}/eclipse/${target.ide.sf.dir}" />
			<property name="build.upload.dir.files.web"     location="${build.upload.dir}/sf-web/${beta.dir}/eclipse/${target.ide.sf.dir}" />
		</else>
	</if>
				
	<property name="site.property.url" value="${site.property.url.tmp}/${target.ide.sf.dir}" />
	
	<fileset dir="${templates.dir}" id="assets">
		<include name="about32.gif" />
		<include name="example.png" />
		<include name="InstallDragDrop.png" />
		<include name="readme_first.txt" />
		<include name="styles.css" />
	</fileset>

	<!-- Set regular expressions and replacement values -->
	<property name="validate.version.regex" value="^([1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{3}|r))?)$" />
	
	<property name="manifest.version.regex" value="(Bundle-Version:\s)([1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)" />
	<property name="manifest.version.replace" value="\1${build.version}" />

	<property name="feature.1.version.regex" value="(&lt;feature.*version=&quot;)([1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)(&quot;\s+provider-name.*?&gt;)" />
	<property name="feature.1.version.replace" value="\1${build.version}\3" />

	<property name="feature.2.version.regex" value="(&lt;import feature.*version=&quot;)([0-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)(&quot;\s+match.*?&gt;)" />
	<property name="feature.2.version.replace" value="\1${build.version}\3" />

	<property name="site.1.version.regex" value="(&lt;feature.*_)([0-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)(\.jar)" />
	<property name="site.1.version.replace" value="\1${build.version}\3" />

	<property name="site.2.version.regex" value="(&lt;feature.*version=&quot;)([0-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)(&quot;)" />
	<property name="site.2.version.replace" value="\1${build.version}\3" />

	<property name="html.copyright.1.version.regex" value="^(Version: )([0-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)(.*)?" />
	<property name="html.copyright.1.version.replace" value="\1${build.version}\3" />
	
	<property name="html.copyright.2.version.regex" value="(Copyright: )([0-9]{4})" />
	<property name="html.copyright.2.version.replace" value="\1${today.year}" />

	<property name="site.property.url.regex" value="(&lt;site)([ ]*url=&quot;\S*&quot;[ ]*)?(&gt;)" />
	<property name="site.property.url.replace" value="\1 url=&quot;${site.property.url}&quot;\3" />
	
	<!--
	<fileset dir="${templates.dir}" id="versionInfo">
		<include name="version.properties" />
	</fileset>
	-->
	
	<property name="remote.library" value="/QSYS.LIB/RPGUNIT.LIB" />
	<property name="remote.savefile" value="RPGUNIT.SAVF" />
	<!-- <property name="local.savefile" value="${build.natural.project.name}_${build.version}.savf" /> -->
	<property name="local.savefile" value="${remote.savefile}" />
	<property name="local.zipfile" value="${build.natural.project.name}_for_${target.ide.ide.product.name.zip}_v${build.version}.zip" />
	<property name="local.savefile.directory" location="${basedir}/../../${build.core.project}/Server" />
	
	<!--
    * =====================================================================
    *   Downloads the library from the System i.
    *   This target requires a patched version of commons-net-3.3.jar
    *   where bug NET-512 has been fixed.
    *   (https://issues.apache.org/jira/browse/NET-512)
    * ===================================================================== -->
	<target name="downloadLibrary" depends="cleanDownloads,ftpCredentials" >
		
	<!--		
		<echo>Herunterladen der Quellenteildateien: RPGUNIT1</echo>
		
		<ftp action="get"
			 server="${ftp.server}"
		     userid="${ftp.user}"
		     password="${ftp.password}"
			 binary="false" 
			 remotedir="${remote.library}/RPGUNIT1.FILE"
			 separator="/"
			 systemTypeKey="OS/400"
			 >
			<fileset dir="${i5-downloads.source.dir}/RPGUNIT1.FILE" casesensitive="false">
		    </fileset>
	  	</ftp>
		
		<echo>Herunterladen der Sicherungsdatei: RPGUNIT</echo>
		
		<ftp action="get"
			 server="${ftp.server}"
		     userid="${ftp.user}"
		     password="${ftp.password}"
			 binary="true" 
		     verbose="true" 
			 remotedir="/QSYS.LIB/RPGUNIT.LIB"
			 systemTypeKey="OS/400"
			 >
			<fileset dir="${i5-downloads.root.dir}" casesensitive="false">
		    	<include name="${remote.savefile}" />
		    </fileset>
	  	</ftp>
		
		<copy file="${i5-downloads.root.dir}/${remote.savefile}" tofile="${local.savefile.directory}/${remote.savefile}" overwrite="true" />

		<antcall target="refreshProjects" />
	-->	
		
	</target>
	
	<!-- =============================================================
	      Erstellt eine neue Update-Site.
	      Alle alten Dateien werden überschrieben, bzw. gelöscht.
	     ============================================================= -->
	<target name="build" depends="clean, updateVersionNumber" description="Step 1">
		
			<echo>+------------------------------------------------------+</echo>
			<echo>|  Finished build ${build.version}                     |</echo>
			<echo>|                                                      |</echo>
			<echo>|  Right-click 'site.xml' and select 'PDE Tools' ->    |</echo>
			<echo>|  'Build Site' to build the update site.              |</echo>
			<echo>|                                                      |</echo>
			<echo>|  Then proceed with:   createSourceForgeFiles         |</echo>
			<echo>|                      -uploadSourceForgeFiles-        |</echo>
			<echo>+------------------------------------------------------+</echo>
			<echo>*** Finished ***</echo>
		
	</target>
	
	<!-- =============================================================
	      Kopiert alle erforderlichen Assets-Dateien.
	     ============================================================= -->
	<target name="createSourceForgeFiles" depends="createZipFile, createUpdateSite, createHomePage" description="Step 3">
		
		<antcall target="cleanTempAndPDE" />
		<antcall target="refreshProjects" />
		
	</target>

	<!--
    * =====================================================================
    *   Creates the help pages.
    *   This target call the build script of the 'iSphere Help Builder'
    *   project to create the web folder.
    *   This target creates the html help pages that go to the project 
    *   web folder at SourceForge.
    *   This target is not specific to RDi/WDSCi. It does not matter for 
    *   what target it is called.
    *
    *   Set the build properties as shown below, if you want to update 
    *   index.html and .htaccess only:
    * 
    *     build.files.enabled=false
    *     build.web.enabled=false
    *     build.help.enabled=true
    *
    *   You can also update the help pages like this:
    *     cleanUploadDir
    *     createSourceForgeHelpPages
    *     cleanSourceForgeHelpPages
    *     uploadSourceForgeHelpPages
    * ===================================================================== -->
	<target name="createSourceForgeHelp" unless="ignore.build.help">

		<echo>Creating help pages ...</echo>
		
		<mkdir dir="${build.upload.dir.help}" />

		<copy todir="${workspace.home}/${build.help.builder}/build/" file="${basedir}/helpproject.properties" overwrite="true" />

		<ant inheritAll="false" inheritrefs="false"  antfile="${workspace.home}/${build.help.builder}/build/build.xml" target="build" />

		<copy todir="${build.upload.dir.help}">
			<fileset dir="${workspace.home}/${build.help.builder}/upload" />
		</copy>

		<eclipse.refreshLocal resource="${build.updatesite}" depth="infinite" />

	</target>
	
	<!-- =============================================================
	      Erzeugt die ZIP Datei.
	     ============================================================= -->
	<target name="createZipFile" depends="prepareZipFile">
		
		<echo>Erzeuge zip Datei: ${version.file}</echo>
		
		<mkdir dir="${build.upload.dir.files}" />
		
	  	<zip destfile="${build.upload.dir.files}/${version.file}">
		    <fileset dir="${temp.dir.local_updatesite}"/>
	  		<!--
	  		<fileset dir="${site.assets}" includes="readme_first.txt" />
	  		<fileset dir="${templates.dir}" includes="upload_savf.bat" />
			<fileset dir="${templates.dir}" includes="upload_src.bat" />
	  		<fileset dir="${site.assets}" includes="readme.txt" />
		    <fileset dir="${temp.dir.root}" />
		    -->
		</zip>		
		
	</target>
	
	<!-- =============================================================
	      Erzeugt die Update Site.
	     ============================================================= -->
	<target name="createUpdateSite" depends="prepareUpdateSite">
		
		<echo>Erzeuge Update Site Datei: ${version.file}</echo>
		
		<mkdir dir="${build.upload.dir.files.eclipse}" />
		<mkdir dir="${build.upload.dir.files.web}" />

		<copy todir="${build.upload.dir.files.web}" >
			<fileset dir="${temp.dir.local_web}" />
		</copy>
		
		<copy todir="${build.upload.dir.files.eclipse}/features" >
			<fileset dir="${temp.dir.local_updatesite}/features"/>
		</copy>
		
		<copy todir="${build.upload.dir.files.eclipse}/plugins" >
			<fileset dir="${temp.dir.local_updatesite}/plugins"/>
		</copy>
		
		<copy todir="${build.upload.dir.files.eclipse}" >
			<fileset dir="${temp.dir.local_updatesite}" includes="artifacts.jar"/>
			<fileset dir="${temp.dir.local_updatesite}" includes="content.jar"/>
			<fileset dir="${temp.dir.local_updatesite}" includes="site.xml"/>
		</copy>
		
		<replaceregexp match="${site.property.url.regex}" replace="${site.property.url.replace}" flags="s" byline="false">
			<fileset dir="${build.upload.dir.files.eclipse}" includes="site.xml" />
		</replaceregexp>
		
	</target>
	
	<!-- =============================================================
	      Erzeugt die Home Page.
	     ============================================================= -->
	<target name="createHomePage" depends="prepareHomepage">
		
		<!--
		<mkdir dir="${build.upload.dir.homepage}" />
		
		<copy todir="${build.upload.dir.homepage}" >
			<fileset dir="${temp.dir.local_homepage}" />
		</copy>
		-->
		
	</target>
	
	<!-- =============================================================
	      Bereitet das Erstellen der ZIP Datei vor.
	     ============================================================= -->
	<target name="prepareZipFile" depends="retrieveVersionInfo">
		
		<mkdir dir="${temp.dir.local_updatesite}" />
		<mkdir dir="${temp.dir.local_updatesite}/features" />
		<mkdir dir="${temp.dir.local_updatesite}/plugins" />
		
		<copy todir="${temp.dir.local_updatesite}/features" >
			<fileset dir="${project.dir}/features" />
		</copy>
		
		<copy todir="${temp.dir.local_updatesite}/plugins" >
			<fileset dir="${project.dir}/plugins" />
		</copy>
		
		<copy todir="${temp.dir.local_updatesite}" >
			<fileset dir="${project.dir}" includes="artifacts.jar" />
			<fileset dir="${project.dir}" includes="content.jar" />
			<fileset dir="${project.dir}" includes="site.xml" />
		</copy>

		<!--
		<copy todir="${temp.dir.local_updatesite}/Server" >
	  		<fileset dir="${local.savefile.directory}" includes="${remote.savefile}" />
	  		<fileset dir="${templates.dir}" includes="upload_savf.bat" />
			<fileset dir="${templates.dir}" includes="upload_src.bat" />
		</copy>

		<copy todir="${temp.dir.local_updatesite}/Server/Source" >
			<fileset dir="${i5-downloads.source.dir}" includes="**" />
		</copy>
		
		<copy file="${i5-downloads.source.dir}/RPGUNIT1.FILE/A_README.MBR" tofile="${temp.dir.local_updatesite}/readme.txt" />
		-->

	</target>
	
	<!-- =============================================================
	      Bereitet das Erstellen der Update-Site Datei vor.
	     ============================================================= -->
	<target name="prepareUpdateSite" depends="retrieveVersionInfo">
		
		<!--
		<move file="${i5-downloads.root.dir}/${remote.savefile}" tofile="${i5-downloads.root.dir}/${local.savefile}" failonerror="false"/>
		-->
		
		<mkdir dir="${temp.dir.local_web}" />
		
		<copy todir="${temp.dir.local_web}/assets" >
			<fileset dir="${templates.dir}/updatesite/assets" />
		</copy>
		
		<copy file="${templates.dir}/updatesite/${build.target}_index.html" todir="${temp.dir.local_web}" />
		<move file="${temp.dir.local_web}/${build.target}_index.html" tofile="${temp.dir.local_web}/index.html" />
		
		<replace dir="${temp.dir.local_web}">
			<include name="index.html"/>
		  	<replacefilter token='&lt;!--DOWNLOAD--&gt;' value='&lt;a class="download-link" href="./downloads/${version.file}"&gt;${build.natural.project.name} ${build.version} for RDP 8.0&lt;/a&gt; - (${build.version})&lt;br&gt;${line.separator}        &lt;!--DOWNLOAD--&gt;' />
		</replace>

		<if>
			<equals arg1="${sf.copy.htaccess}" arg2="true" />
			<then>
				<copy file="${templates.dir}/updatesite/_htaccess" todir="${temp.dir.local_web}" />
				<move file="${temp.dir.local_web}/_htaccess" tofile="${temp.dir.local_web}/.htaccess" />
				<replace file="${temp.dir.local_web}/.htaccess" token="@BUILD_TARGET@" value="${target.ide.sf.dir}" />
				<replace file="${temp.dir.local_web}/.htaccess" token="@BETA_VERSION@" value="${beta.dir}" />
				<replace file="${temp.dir.local_web}/.htaccess" token="@SF_FTP_PROJECT@" value="${sf.ftp.project}" />
			</then>
		</if>
		
	</target>
	
	<!-- =============================================================
	      Bereitet das Erstellen der Home-Page Datei vor.
	     ============================================================= -->
	<target name="prepareHomepage" depends="retrieveVersionInfo">
		
		<!--
		<move file="${i5-downloads.root.dir}/${remote.savefile}" tofile="${i5-downloads.root.dir}/${local.savefile}" failonerror="false"/>
		-->

		<!--
		<echo>Using homepage project: ${build.homepage.project}</echo>
		
		<mkdir dir="${temp.dir.local_homepage}" />
		
		<copy todir="${temp.dir.local_homepage}/assets" >
			<fileset dir="${workspace.home}/${build.homepage.project}/html/assets" />
		</copy>
			
		<copy file="${workspace.home}/${build.homepage.project}/html/index.html" todir="${temp.dir.local_homepage}" />
		<copy file="${workspace.home}/${build.homepage.project}/html/index.php" todir="${temp.dir.local_homepage}" />
		<copy file="${workspace.home}/${build.homepage.project}/html/support.php" todir="${temp.dir.local_homepage}" />
			
		<replace file="${temp.dir.local_homepage}/index.php" token="@TODAY@" value="${today.timestamp}" />
		<replace file="${temp.dir.local_homepage}/index.php" token="@TODAY_YEAR@" value="${today.year}" />
		<replace file="${temp.dir.local_homepage}/support.php" token="@TODAY@" value="${today.timestamp}" />
		<replace file="${temp.dir.local_homepage}/support.php" token="@TODAY_YEAR@" value="${today.year}" />
		-->

	</target>
	
	<!-- =============================================================
	      Kopiert die Versions-Informationen.
	     ============================================================= -->
	<target name="retrieveVersionInfo" depends="">
		
		<property name="version.file" value="${local.zipfile}"/>
		
		<echo>Ermittelter Dateiname ist: ${version.file}</echo>
	</target>

	<!-- =============================================================
	      Abfragen FTP Passwort.
	     ============================================================= -->
	<target name="ftpCredentials" depends="">

		<input
	    	message="Please enter FTP password:"
	    	addproperty="ftp.password"
	    	defaultvalue="" />
		
		<property name="ftp.server" value="ghentw.gfd.de" />
		<property name="ftp.user" value="raddatz" />
		
	</target>

	<!-- =============================================================
	      Löscht alle bestehenden Dateien.
	     ============================================================= -->
	<target name="clean" depends="cleanTempAndPDE" description="Cleans the update site">
		
		<mkdir dir="${build.upload.dir}" />
		
		<!-- 'upload' folder -->
		<delete includeemptydirs="true">
			<fileset dir="${build.upload.dir}" includes="**/*"/>
		</delete>
		
		<antcall target="refreshProjects" />
		
	</target>

	<!-- =============================================================
	      Löscht alle bestehenden Dateien.
	     ============================================================= -->
	<target name="cleanTempAndPDE" depends="" description="Cleans temp and PDE folders">
		
		<mkdir dir="${temp.dir.root}" />

		<!-- 'temp' folder -->
		<delete includeemptydirs="true">
			<fileset dir="${temp.dir.root}" includes="**/*"/>
		</delete>

		<!-- Files created by PDE Tools -->
		<delete failonerror="true" >
			<fileset dir="${site.features}" />
			<fileset dir="${site.plugins}" />
		</delete>
		
		<delete failonerror="true" >
			<fileset dir="${site.root}" includes="artifacts.jar" />
			<fileset dir="${site.root}" includes="content.jar" />
		</delete>
		
		<antcall target="refreshProjects" />
		
	</target>

	<!-- =============================================================
	      Löscht alle von der IBM i heruntergeladenen Dateien.
	     ============================================================= -->
	<target name="cleanDownloads" description="Clean i5 downloads">
		
		<echo>Löschen Verzeichnisinhalt: ${i5-downloads.source.dir}</echo>
		
		<delete failonerror="true">
			<fileset dir="${i5-downloads.root.dir}/" >
				<filename name="**" />
			</fileset>
		</delete>
		
		<!--
		<delete failonerror="false">
			<fileset dir="${i5-downloads.source.dir}/RPGUNIT1.FILE" /> 
			<fileset dir="${i5-downloads.source.dir}/RPGUNITC1.FILE" /> 
			<fileset dir="${i5-downloads.source.dir}/RPGUNITF1.FILE" /> 
			<fileset dir="${i5-downloads.source.dir}/RPGUNITT1.FILE" /> 
			<fileset dir="${i5-downloads.source.dir}/RPGUNITY1.FILE" /> 
		</delete>
		-->

		<antcall target="refreshProjects" />
		
	</target>

	<!--
    * =====================================================================
    *   Updates the version numbers of the following files:
    *     - MANIFEST.MF
    *     - feature.xml
    *     - site.xml
    * ===================================================================== -->
	<target name="updateVersionNumber" depends="validateVersionNumber">

		<echo>Updating version number to: ${build.version} ...</echo>

		<for list="${build.projects}" delimiter="," param="project">
			<sequential>

				<if>
					<available file="${workspace.home}\@{project}" type="dir"/>
					<then>

						<echo message="${workspace.home}\@{project}" />

						<if>
							<available file="${workspace.home}\@{project}/META-INF" />
							<then>
								<replaceregexp match="${manifest.version.regex}" replace="${manifest.version.replace}" byline="true">
									<fileset dir="${workspace.home}\@{project}/META-INF" includes="MANIFEST.MF" />
								</replaceregexp>
							</then>
						</if>
		
						<if>
							<available file="${workspace.home}\@{project}/html" />
							<then>
								<echo>Updating HTML files: @{project} ...</echo>
								<replaceregexp match="${html.copyright.1.version.regex}" replace="${html.copyright.1.version.replace}" byline="true">
									<fileset dir="${workspace.home}\@{project}/html" includes="copyright.html" />
								</replaceregexp>
								<replaceregexp match="${html.copyright.2.version.regex}" replace="${html.copyright.2.version.replace}" byline="true">
									<fileset dir="${workspace.home}\@{project}/html" includes="copyright.html" />
								</replaceregexp>
							</then>
						</if>
		
						<replaceregexp match="${feature.1.version.regex}" replace="${feature.1.version.replace}" flags="s" byline="false">
							<fileset dir="${workspace.home}\@{project}" includes="feature.xml" />
						</replaceregexp>
		
						<replaceregexp match="${feature.2.version.regex}" replace="${feature.2.version.replace}" flags="s" byline="false">
							<fileset dir="${workspace.home}\@{project}" includes="feature.xml" />
						</replaceregexp>
		
						<replaceregexp match="${site.1.version.regex}" replace="${site.1.version.replace}" flags="g" byline="false">
							<fileset dir="${workspace.home}\@{project}" includes="site.xml" />
						</replaceregexp>
		
						<replaceregexp match="${site.2.version.regex}" replace="${site.2.version.replace}" flags="g" byline="false">
							<fileset dir="${workspace.home}\@{project}" includes="site.xml" />
						</replaceregexp>

						<eclipse.refreshLocal resource="@{project}" depth="infinite" />
					</then>
				</if>
			</sequential>
		</for>

		<echo>Done.</echo>

	</target>

	<!--
    * =====================================================================
    *   Validates the version number to ensure, that it matches
    *   the required format.
    * ===================================================================== -->
	<target name="validateVersionNumber">

		<echo>Validating version number to: ${build.version} ...</echo>

		<propertyregex property="validated.version" input="${build.version}" regexp="${validate.version.regex}" select="\1" casesensitive="true" />

		<if>
			<equals arg1="${build.version}" arg2="${validated.version}" />
			<then>
				<echo>Version number validated: OK</echo>
			</then>
			<else>
				<echo>+------------------------------------------------------+</echo>
				<echo>| Version number does not match expected pattern!      |</echo>
				<echo>|                                                      |</echo>
				<echo>| Pattern:                                             |</echo>
				<echo>| major.minor.micro.qualifier                          |</echo>
				<echo>|                                                      |</echo>
				<echo>| major - major version number (requested)             |</echo>
				<echo>| minor - minor version number (recommended)           |</echo>
				<echo>| micro - micro version number (optional)              |</echo>
				<echo>|                                                      |</echo>
				<echo>| The possible qualifiers are:                         |</echo>
				<echo>| r     - release version                              |</echo>
				<echo>| bnnn  - beta version, where nnn between 001 and 999  |</echo>
				<echo>+------------------------------------------------------+</echo>
				<fail>*** ERROR: Invalid version number. ***</fail>
			</else>
		</if>

	</target>

	<!--
    * =====================================================================
    *   Refreshs the projects listed in 'build.properties'.
    * ===================================================================== -->
	<target name="refreshProjects">

		<echo>Refereshing projects ...</echo>

		<for list="${build.projects}" delimiter="," param="project">
			<sequential>
				<eclipse.refreshLocal resource="@{project}" depth="infinite" />
				<echo>* @{project}</echo>
			</sequential>
		</for>

		<echo>Done.</echo>

	</target>

</project>